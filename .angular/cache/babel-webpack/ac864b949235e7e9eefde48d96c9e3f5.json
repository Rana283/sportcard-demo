{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, Injector } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i2 from '@ngrx/store';\nimport { Store, createSelector, INITIAL_STATE, setNgrxMockEnvironment, ActionsSubject, StateObservable, ReducerManager } from '@ngrx/store';\n\nclass MockState extends BehaviorSubject {\n  constructor() {\n    super({});\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nMockState.ɵfac = function MockState_Factory(t) {\n  return new (t || MockState)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nMockState.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockState,\n  factory: MockState.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockState, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nconst MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n\nclass MockStore extends Store {\n  constructor(state$, actionsObserver, reducerManager, initialState, mockSelectors = []) {\n    super(state$, actionsObserver, reducerManager);\n    this.state$ = state$;\n    this.initialState = initialState;\n    this.selectors = new Map();\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState) {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector(selector, value) {\n    this.selectors.set(selector, value);\n    const resultSelector = typeof selector === 'string' ? createSelector(() => {}, () => value) : selector;\n    resultSelector.setResult(value);\n    return resultSelector;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector, prop) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject(this.selectors.get(selector)).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n  /**\n   * Refreshes the existing state.\n   */\n\n\n  refreshState() {\n    if (this.lastState) this.setState(Object.assign({}, this.lastState));\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nMockStore.ɵfac = function MockStore_Factory(t) {\n  return new (t || MockStore)(i0.ɵɵinject(MockState), i0.ɵɵinject(i2.ActionsSubject), i0.ɵɵinject(i2.ReducerManager), i0.ɵɵinject(INITIAL_STATE), i0.ɵɵinject(MOCK_SELECTORS));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nMockStore.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockStore,\n  factory: MockStore.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockStore, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MockState\n    }, {\n      type: i2.ActionsSubject\n    }, {\n      type: i2.ReducerManager\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_STATE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MOCK_SELECTORS]\n      }]\n    }];\n  }, null);\n})();\n\nclass MockReducerManager extends BehaviorSubject {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature) {\n    /* noop */\n  }\n\n  addFeatures(feature) {\n    /* noop */\n  }\n\n  removeFeature(feature) {\n    /* noop */\n  }\n\n  removeFeatures(features) {\n    /* noop */\n  }\n\n  addReducer(key, reducer) {\n    /* noop */\n  }\n\n  addReducers(reducers) {\n    /* noop */\n  }\n\n  removeReducer(featureKey) {\n    /* noop */\n  }\n\n  removeReducers(featureKeys) {\n    /* noop */\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nMockReducerManager.ɵfac = function MockReducerManager_Factory(t) {\n  return new (t || MockReducerManager)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nMockReducerManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockReducerManager,\n  factory: MockReducerManager.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockReducerManager, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @description\n * Creates mock store providers.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```typescript\n * describe('Books Component', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockStore({\n *           initialState: { books: { entities: [] } },\n *           selectors: [\n *             { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *             { selector: selectVisibleBooks, value: ['Book 1'] },\n *           ],\n *         }),\n *       ],\n *     });\n *\n *     store = TestBed.inject(MockStore);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```typescript\n * describe('Counter Component', () => {\n *   let injector: Injector;\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockStore({ initialState: { counter: 0 } }),\n *       ],\n *     });\n *     store = injector.get(MockStore);\n *   });\n * });\n * ```\n */\n\n\nfunction provideMockStore(config = {}) {\n  setNgrxMockEnvironment(true);\n  return [{\n    provide: ActionsSubject,\n    useFactory: () => new ActionsSubject(),\n    deps: []\n  }, {\n    provide: MockState,\n    useFactory: () => new MockState(),\n    deps: []\n  }, {\n    provide: MockReducerManager,\n    useFactory: () => new MockReducerManager(),\n    deps: []\n  }, {\n    provide: INITIAL_STATE,\n    useValue: config.initialState || {}\n  }, {\n    provide: MOCK_SELECTORS,\n    useValue: config.selectors\n  }, {\n    provide: StateObservable,\n    useExisting: MockState\n  }, {\n    provide: ReducerManager,\n    useExisting: MockReducerManager\n  }, {\n    provide: MockStore,\n    useFactory: mockStoreFactory,\n    deps: [MockState, ActionsSubject, ReducerManager, INITIAL_STATE, MOCK_SELECTORS]\n  }, {\n    provide: Store,\n    useExisting: MockStore\n  }];\n}\n\nfunction mockStoreFactory(mockState, actionsSubject, reducerManager, initialState, mockSelectors) {\n  return new MockStore(mockState, actionsSubject, reducerManager, initialState, mockSelectors);\n}\n/**\n * @description\n * Creates mock store with all necessary dependencies outside of the `TestBed`.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns `MockStore<T>`\n *\n * @usageNotes\n *\n * ```typescript\n * describe('Books Effects', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     store = getMockStore({\n *       initialState: { books: { entities: ['Book 1', 'Book 2', 'Book 3'] } },\n *       selectors: [\n *         { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *         { selector: selectVisibleBooks, value: ['Book 1'] },\n *       ],\n *     });\n *   });\n * });\n * ```\n */\n\n\nfunction getMockStore(config = {}) {\n  const injector = Injector.create({\n    providers: provideMockStore(config)\n  });\n  return injector.get(MockStore);\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MockReducerManager, MockState, MockStore, getMockStore, provideMockStore };","map":{"version":3,"sources":["C:/Users/vlankala/assignment/sport-card/node_modules/@ngrx/store/fesm2015/ngrx-store-testing.mjs"],"names":["i0","Injectable","InjectionToken","Inject","Injector","BehaviorSubject","i2","Store","createSelector","INITIAL_STATE","setNgrxMockEnvironment","ActionsSubject","StateObservable","ReducerManager","MockState","constructor","ɵfac","ɵprov","type","MOCK_SELECTORS","MockStore","state$","actionsObserver","reducerManager","initialState","mockSelectors","selectors","Map","resetSelectors","setState","scannedActions$","asObservable","mockSelector","overrideSelector","selector","value","nextState","next","lastState","set","resultSelector","setResult","keys","release","clearResult","clear","select","prop","has","get","addReducer","removeReducer","refreshState","Object","assign","undefined","decorators","args","MockReducerManager","addFeature","feature","addFeatures","removeFeature","removeFeatures","features","key","reducer","addReducers","reducers","featureKey","removeReducers","featureKeys","provideMockStore","config","provide","useFactory","deps","useValue","useExisting","mockStoreFactory","mockState","actionsSubject","getMockStore","injector","create","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, Injector } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i2 from '@ngrx/store';\nimport { Store, createSelector, INITIAL_STATE, setNgrxMockEnvironment, ActionsSubject, StateObservable, ReducerManager } from '@ngrx/store';\n\nclass MockState extends BehaviorSubject {\n    constructor() {\n        super({});\n    }\n}\n/** @nocollapse */ /** @nocollapse */ MockState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockState, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ MockState.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockState });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockState, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nconst MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n\nclass MockStore extends Store {\n    constructor(state$, actionsObserver, reducerManager, initialState, mockSelectors = []) {\n        super(state$, actionsObserver, reducerManager);\n        this.state$ = state$;\n        this.initialState = initialState;\n        this.selectors = new Map();\n        this.resetSelectors();\n        this.setState(this.initialState);\n        this.scannedActions$ = actionsObserver.asObservable();\n        for (const mockSelector of mockSelectors) {\n            this.overrideSelector(mockSelector.selector, mockSelector.value);\n        }\n    }\n    setState(nextState) {\n        this.state$.next(nextState);\n        this.lastState = nextState;\n    }\n    overrideSelector(selector, value) {\n        this.selectors.set(selector, value);\n        const resultSelector = typeof selector === 'string'\n            ? createSelector(() => { }, () => value)\n            : selector;\n        resultSelector.setResult(value);\n        return resultSelector;\n    }\n    resetSelectors() {\n        for (const selector of this.selectors.keys()) {\n            if (typeof selector !== 'string') {\n                selector.release();\n                selector.clearResult();\n            }\n        }\n        this.selectors.clear();\n    }\n    select(selector, prop) {\n        if (typeof selector === 'string' && this.selectors.has(selector)) {\n            return new BehaviorSubject(this.selectors.get(selector)).asObservable();\n        }\n        return super.select(selector, prop);\n    }\n    addReducer() {\n        /* noop */\n    }\n    removeReducer() {\n        /* noop */\n    }\n    /**\n     * Refreshes the existing state.\n     */\n    refreshState() {\n        if (this.lastState)\n            this.setState(Object.assign({}, this.lastState));\n    }\n}\n/** @nocollapse */ /** @nocollapse */ MockStore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockStore, deps: [{ token: MockState }, { token: i2.ActionsSubject }, { token: i2.ReducerManager }, { token: INITIAL_STATE }, { token: MOCK_SELECTORS }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ MockStore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockStore });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockStore, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: MockState }, { type: i2.ActionsSubject }, { type: i2.ReducerManager }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [INITIAL_STATE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MOCK_SELECTORS]\n                    }] }];\n    } });\n\nclass MockReducerManager extends BehaviorSubject {\n    constructor() {\n        super(() => undefined);\n    }\n    addFeature(feature) {\n        /* noop */\n    }\n    addFeatures(feature) {\n        /* noop */\n    }\n    removeFeature(feature) {\n        /* noop */\n    }\n    removeFeatures(features) {\n        /* noop */\n    }\n    addReducer(key, reducer) {\n        /* noop */\n    }\n    addReducers(reducers) {\n        /* noop */\n    }\n    removeReducer(featureKey) {\n        /* noop */\n    }\n    removeReducers(featureKeys) {\n        /* noop */\n    }\n}\n/** @nocollapse */ /** @nocollapse */ MockReducerManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockReducerManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ MockReducerManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockReducerManager });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: MockReducerManager, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/**\n * @description\n * Creates mock store providers.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```typescript\n * describe('Books Component', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockStore({\n *           initialState: { books: { entities: [] } },\n *           selectors: [\n *             { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *             { selector: selectVisibleBooks, value: ['Book 1'] },\n *           ],\n *         }),\n *       ],\n *     });\n *\n *     store = TestBed.inject(MockStore);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```typescript\n * describe('Counter Component', () => {\n *   let injector: Injector;\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockStore({ initialState: { counter: 0 } }),\n *       ],\n *     });\n *     store = injector.get(MockStore);\n *   });\n * });\n * ```\n */\nfunction provideMockStore(config = {}) {\n    setNgrxMockEnvironment(true);\n    return [\n        {\n            provide: ActionsSubject,\n            useFactory: () => new ActionsSubject(),\n            deps: [],\n        },\n        { provide: MockState, useFactory: () => new MockState(), deps: [] },\n        {\n            provide: MockReducerManager,\n            useFactory: () => new MockReducerManager(),\n            deps: [],\n        },\n        { provide: INITIAL_STATE, useValue: config.initialState || {} },\n        { provide: MOCK_SELECTORS, useValue: config.selectors },\n        { provide: StateObservable, useExisting: MockState },\n        { provide: ReducerManager, useExisting: MockReducerManager },\n        {\n            provide: MockStore,\n            useFactory: mockStoreFactory,\n            deps: [\n                MockState,\n                ActionsSubject,\n                ReducerManager,\n                INITIAL_STATE,\n                MOCK_SELECTORS,\n            ],\n        },\n        { provide: Store, useExisting: MockStore },\n    ];\n}\nfunction mockStoreFactory(mockState, actionsSubject, reducerManager, initialState, mockSelectors) {\n    return new MockStore(mockState, actionsSubject, reducerManager, initialState, mockSelectors);\n}\n/**\n * @description\n * Creates mock store with all necessary dependencies outside of the `TestBed`.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns `MockStore<T>`\n *\n * @usageNotes\n *\n * ```typescript\n * describe('Books Effects', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     store = getMockStore({\n *       initialState: { books: { entities: ['Book 1', 'Book 2', 'Book 3'] } },\n *       selectors: [\n *         { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *         { selector: selectVisibleBooks, value: ['Book 1'] },\n *       ],\n *     });\n *   });\n * });\n * ```\n */\nfunction getMockStore(config = {}) {\n    const injector = Injector.create({ providers: provideMockStore(config) });\n    return injector.get(MockStore);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockReducerManager, MockState, MockStore, getMockStore, provideMockStore };\n"]},"metadata":{},"sourceType":"module"}